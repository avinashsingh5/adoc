#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

int NUM_READERS = 3;
int NUM_WRITERS = 2;
int MAX_ATTEMPTS = 5;

// Shared data
int shared_data = 0;
int num_readers = 0;

// Semaphores
sem_t mutex;
sem_t wrt;

// Reader function
void *reader(void *arg) {
    int id = (int)arg;
    int attempts = 0;

    while (attempts < MAX_ATTEMPTS) {
        // Entry section
        sem_wait(&mutex);
        num_readers++;
        if (num_readers == 1) {
            sem_wait(&wrt);
        }
        sem_post(&mutex);

        // Critical section
        printf("Reader %d read shared_data as %d\n", id, shared_data);

        // Exit section
        sem_wait(&mutex);
        num_readers--;
        if (num_readers == 0) {
            sem_post(&wrt);
        }
        sem_post(&mutex);

        attempts++;
    }

    pthread_exit(NULL);
}

// Writer function
void *writer(void *arg) {
    int id = (int)arg;
    int attempts = 0;

    while (attempts < MAX_ATTEMPTS) {
        // Entry section
        sem_wait(&wrt);

        // Critical section
        shared_data++;
        printf("Writer %d wrote shared_data as %d\n", id, shared_data);

        // Exit section
        sem_post(&wrt);

        attempts++;
    }

    pthread_exit(NULL);
}

int main() {
    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    // Create reader threads
    pthread_t reader_threads[NUM_READERS];
    int reader_ids[NUM_READERS];
    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i;
        pthread_create(&reader_threads[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    pthread_t writer_threads[NUM_WRITERS];
    int writer_ids[NUM_WRITERS];
    for (int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i;
        pthread_create(&writer_threads[i], NULL, writer, &writer_ids[i]);
    }

    // Wait for threads to finish
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(reader_threads[i], NULL);
    }
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writer_threads[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}









next






#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int count = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t can_produce = PTHREAD_COND_INITIALIZER;
pthread_cond_t can_consume = PTHREAD_COND_INITIALIZER;

// Test case (a)
void* producer_a(void* arg) {
    for (int i = 0; i < 10; ++i) {
        pthread_mutex_lock(&mutex);

        while (count > 0) {
            pthread_cond_wait(&can_produce, &mutex);
        }

        // Produce item and add to buffer
        buffer[count] = rand() % 100;
        printf("Producer (a) produced: %d\n", buffer[count]);
        count++;

        pthread_cond_signal(&can_consume);

        pthread_mutex_unlock(&mutex);

        sleep(1); // Simulate some work
    }

    pthread_exit(NULL);
}

void* consumer_a(void* arg) {
    for (int i = 0; i < 10; ++i) {
        pthread_mutex_lock(&mutex);

        while (count == 0) {
            pthread_cond_wait(&can_consume, &mutex);
        }

        // Consume item from buffer
        printf("Consumer (a) consumed: %d\n", buffer[count - 1]);
        count--;

        pthread_cond_signal(&can_produce);

        pthread_mutex_unlock(&mutex);

        sleep(1); // Simulate some work
    }

    pthread_exit(NULL);
}

// Test case (b)
void* producer_b(void* arg) {
    for (int i = 0; i < 10; ++i) {
        pthread_mutex_lock(&mutex);

        // Produce item and add to buffer
        buffer[count] = rand() % 100;
        printf("Producer (b) produced: %d\n", buffer[count]);
        count++;

        pthread_cond_signal(&can_consume);

        pthread_mutex_unlock(&mutex);

        sleep(1); // Simulate some work
    }

    pthread_exit(NULL);
}

void* consumer_b(void* arg) {
    for (int i = 0; i < 10; ++i) {
        pthread_mutex_lock(&mutex);

        while (count == 0) {
            pthread_cond_wait(&can_consume, &mutex);
        }

        // Consume the last produced item from buffer
        printf("Consumer (b) consumed: %d\n", buffer[count - 1]);
        count--;

        pthread_cond_signal(&can_produce);

        pthread_mutex_unlock(&mutex);

        sleep(1); // Simulate some work
    }

    pthread_exit(NULL);
}

// Test case (c)
void* producer_c(void* arg) {
    for (int i = 0; i < 10; ++i) {
        pthread_mutex_lock(&mutex);

        while (count == 0) {
            pthread_cond_wait(&can_consume, &mutex);
        }

        // Produce item and write on the last consumed index of the buffer
        buffer[count - 1] = rand() % 100;
        printf("Producer (c) produced at the last consumed index: %d\n", buffer[count - 1]);

        pthread_cond_signal(&can_produce);

        pthread_mutex_unlock(&mutex);

        sleep(1); // Simulate some work
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t producer_thread_a, consumer_thread_a;
    pthread_t producer_thread_b, consumer_thread_b;
    pthread_t producer_thread_c;

    // Test case (a)
    pthread_create(&producer_thread_a, NULL, producer_a, NULL);
    pthread_create(&consumer_thread_a, NULL, consumer_a, NULL);

    // Test case (b)
    pthread_create(&producer_thread_b, NULL, producer_b, NULL);
    pthread_create(&consumer_thread_b, NULL, consumer_b, NULL);

    // Test case (c)
    pthread_create(&producer_thread_c, NULL, producer_c, NULL);

    // Join threads
    pthread_join(producer_thread_a, NULL);
    pthread_join(consumer_thread_a, NULL);

    pthread_join(producer_thread_b, NULL);
    pthread_join(consumer_thread_b, NULL);

    pthread_join(producer_thread_c, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&can_produce);
    pthread_cond_destroy(&can_consume);

    return 0;
}
